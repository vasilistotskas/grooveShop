version: '3.9'

services:
  app:
    container_name: backend
    build:
      context: .
      dockerfile: docker/Backend.Dockerfile
    restart: always
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn app.wsgi:application --bind 0.0.0.0:8001"
    volumes:
      - ./app:/app
      - ./app/static:/backend/static
      - ./app/media:/backend/media
    ports:
      - 8001:8001
    expose:
      - 8001
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - APPEND_SLASH=${APPEND_SLASH}
      - COERCE_DECIMAL_TO_STRING=${COERCE_DECIMAL_TO_STRING}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - LANGUAGE_CODE=${LANGUAGE_CODE}
      - TIME_ZONE=${TIME_ZONE}
      - USE_I18N=${USE_I18N}
      - USE_L10N=${USE_L10N}
      - USE_TZ=${USE_TZ}
    depends_on:
      - db
      - redis
    networks:
      - groovy-backbone

  db:
    container_name: postgresql_db
    image: postgres:13-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    networks:
      - groovy-backbone

  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_LISTEN_PORT=${PGADMIN_LISTEN_PORT}
    ports:
      - 5050:5050
    depends_on:
      - db
    networks:
      - groovy-backbone

  celery:
    container_name: celery
    image: celery
    build:
      context: .
      dockerfile: docker/Backend.Dockerfile
    restart: always
    command: celery -A app worker -l info
    volumes:
      - ./app:/app
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
    depends_on:
      - db
      - redis
      - app
    networks:
      - groovy-backbone

  redis:
    container_name: redis
    image: redis
    restart: always
    ports:
      - 6379:6379
    networks:
      - groovy-backbone

  nginx:
    container_name: nginx
    image: nginx:mainline
    build:
      context: ./nginx
      dockerfile: Nginx.Dockerfile
    volumes:
      - ./app:/app
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - 8000:8000
    depends_on:
      - app
    restart: always
    networks:
      - groovy-backbone

  service-media_stream:
    container_name: service-media_stream
    image: service-manager:${SERVICE_MANAGER_IMAGE_REV}-dev
    build:
      context: ./MediaStream
      target: production
      dockerfile: ./Dockerfile
    command: npm run start:prod
    ports:
      - 3003:3003
    volumes:
      - ./MediaStream:/usr/src/app
      - /usr/src/app/node_modules
      - service-media_stream:/usr/src/app/storage
    restart: unless-stopped
    depends_on:
      - db
      - redis
      - app
    networks:
      - groovy-backbone

#  frontend:
#    container_name: frontend
#    image: vuejs/ci
#    build:
#      context: .
#      dockerfile: docker/Frontend.Dockerfile
#    restart: always
#    volumes:
#      - ./app/frontend:/frontend
#      - /app/node_modules
#    environment:
#      - NODE_ENV=development
#      - BASE_URL=http://localhost:8000
#      - VUE_APP_I18N_LOCALE=en
#      - VUE_APP_I18N_FALLBACK_LOCALE=en
#      - VUE_APP_API_URL=http://localhost:8000
#      - VUE_APP_GRAPHQL_URL=http://localhost:8000/graphql
#    depends_on:
#      - app

volumes:
  postgres_data:
  production_static_data:
  service-media_stream:

networks:
  groovy-backbone:
    driver: bridge