version: '3.8'

services:
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: docker/Backend.Dockerfile
    restart: always
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn backend.app.wsgi:application --bind 0.0.0.0:8001 --reload"
    volumes:
      - ./src:/src
      - web-static:/src/backend/static
      - web-media:/src/backend/media
      - web-files:/src/backend/files
      - web-logs:/src/backend/logs
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - APPEND_SLASH=${APPEND_SLASH}
      - BACKEND_BASE_URL=${BACKEND_BASE_URL}
      - APP_BASE_URL=${APP_BASE_URL}
      - VITE_APP_URL=${VITE_APP_URL}
      - COERCE_DECIMAL_TO_STRING=${COERCE_DECIMAL_TO_STRING}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - LANGUAGE_CODE=${LANGUAGE_CODE}
      - TIME_ZONE=${TIME_ZONE}
      - USE_I18N=${USE_I18N}
      - USE_L10N=${USE_L10N}
      - USE_TZ=${USE_TZ}
    depends_on:
      - db
      - redis
    ports:
      - "8001:8001"
    networks:
      - groovy-backbone

  db:
    container_name: postgresql_db
    image: postgres:13-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - groovy-backbone

  nginx:
    container_name: nginx
    image: nginx:groovyshop
    build:
      context: ./nginx
      dockerfile: Nginx.Dockerfile
    volumes:
      - ./src:/src
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "8010:8010"
    depends_on:
      - backend
      - service-media_stream
    restart: always
    networks:
      - groovy-backbone

  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_LISTEN_PORT=${PGADMIN_LISTEN_PORT}
    ports:
      - "5050:5050"
    depends_on:
      - db
    networks:
      - groovy-backbone

  redis:
    container_name: redis
    image: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - groovy-backbone

  redisinsight:
    image: 'redislabs/redisinsight:latest'
    container_name: redisinsight
    restart: always
    ports:
      - '13333:8001'
    networks:
      - groovy-backbone

  service-media_stream:
    container_name: service-media_stream
    image: service-manager-media-stream:${SERVICE_MANAGER_IMAGE_REV}
    build:
      context: ./mediaStream
      dockerfile: ./Dockerfile
    command: npm run start:prod
    ports:
      - "3003:3003"
    volumes:
      - ./mediaStream:/usr/src/app
      - /usr/src/app/node_modules
      - service-media_stream:/usr/src/app/storage
    restart: unless-stopped
    depends_on:
      - db
      - redis
      - backend
    networks:
      - groovy-backbone

  frontend:
    container_name: frontend
    image: node:lts
    build:
      context: .
      dockerfile: docker/Frontend.Dockerfile
    volumes:
      - ./src/frontend/var:/frontend/var
      - ./src/frontend/env:/frontend/env
      - ./src/frontend/public:/frontend/public
      - ./src/frontend/src:/frontend/src
      - ./src/frontend/.eslintrc.cjs:/frontend/.eslintrc.cjs
      - ./src/frontend/.prettierrc.yaml:/frontend/.prettierrc.yaml
      - ./src/frontend/src/Apollo/ApolloProvider.ts:/frontend/src/Apollo/ApolloProvider.ts
      - ./src/frontend/babel.config.cjs:/frontend/babel.config.cjs
      - ./src/frontend/env.d.ts:/frontend/env.d.ts
      - ./src/frontend/index.html:/frontend/index.html
      - ./src/frontend/package.json:/frontend/package.json
      - ./src/frontend/package-lock.json:/frontend/package-lock.json
      - ./src/frontend/tsconfig.json:/frontend/tsconfig.json
      - ./src/frontend/tsconfig.node.json:/frontend/tsconfig.node.json
      - ./src/frontend/typings.d.ts:/frontend/typings.d.ts
      - ./src/frontend/vite.config.ts:/frontend/vite.config.ts
      - ./src/frontend/vue.config.cjs:/frontend/vue.config.cjs
      - /src/node_modules
    restart: "always"
    ports:
      - "8011:8011"
    depends_on:
      - backend
    networks:
      - groovy-backbone

#
#  celery:
#    container_name: celery
#    image: celery
#    build:
#      context: .
#      dockerfile: docker/Backend.Dockerfile
#    restart: always
#    command: celery -A app worker -l info
#    volumes:
#      - ./app:/app
#    environment:
#      - SECRET_KEY=${SECRET_KEY}
#      - DEBUG=${DEBUG}
#    depends_on:
#      - db
#      - redis
#      - app

volumes:
  postgres_data:
  production_static_data:
  service-media_stream:
  web-static:
  web-media:
  web-files:
  web-logs:

networks:
  groovy-backbone:
    driver: bridge
