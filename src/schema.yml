openapi: 3.0.3
info:
  title: GrooveShop API
  version: 1.0.0
  description: GrooveShop API
paths:
  /api/v1/active_users/active_users_count/:
    get:
      operationId: api_v1_active_users_active_users_count_retrieve
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: ''
  /api/v1/active_users/refresh_last_activity/:
    post:
      operationId: api_v1_active_users_refresh_last_activity_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAccount'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: ''
  /api/v1/blog/author/:
    get:
      operationId: api_v1_blog_author_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogAuthorList'
          description: ''
    post:
      operationId: api_v1_blog_author_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
  /api/v1/blog/author{format}:
    get:
      operationId: api_v1_blog_author_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogAuthorList'
          description: ''
    post:
      operationId: api_v1_blog_author_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
  /api/v1/blog/author/{id}/:
    get:
      operationId: api_v1_blog_author_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
    put:
      operationId: api_v1_blog_author_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
    patch:
      operationId: api_v1_blog_author_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthor'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
    delete:
      operationId: api_v1_blog_author_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/blog/author/{id}{format}:
    get:
      operationId: api_v1_blog_author_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
    put:
      operationId: api_v1_blog_author_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
    patch:
      operationId: api_v1_blog_author_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthor'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
    delete:
      operationId: api_v1_blog_author_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/blog/category/:
    get:
      operationId: api_v1_blog_category_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
    post:
      operationId: api_v1_blog_category_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategory'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
  /api/v1/blog/category{format}:
    get:
      operationId: api_v1_blog_category_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
    post:
      operationId: api_v1_blog_category_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategory'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
  /api/v1/blog/category/{id}/:
    get:
      operationId: api_v1_blog_category_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
    put:
      operationId: api_v1_blog_category_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategory'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
    patch:
      operationId: api_v1_blog_category_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategory'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
    delete:
      operationId: api_v1_blog_category_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/blog/category/{id}{format}:
    get:
      operationId: api_v1_blog_category_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
    put:
      operationId: api_v1_blog_category_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategory'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
    patch:
      operationId: api_v1_blog_category_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategory'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
    delete:
      operationId: api_v1_blog_category_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/blog/comment/:
    get:
      operationId: api_v1_blog_comment_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: post
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
    post:
      operationId: api_v1_blog_comment_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogComment'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
  /api/v1/blog/comment{format}:
    get:
      operationId: api_v1_blog_comment_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: post
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
    post:
      operationId: api_v1_blog_comment_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogComment'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
  /api/v1/blog/comment/{id}/:
    get:
      operationId: api_v1_blog_comment_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
    put:
      operationId: api_v1_blog_comment_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogComment'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
    patch:
      operationId: api_v1_blog_comment_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogComment'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
    delete:
      operationId: api_v1_blog_comment_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/blog/comment/{id}{format}:
    get:
      operationId: api_v1_blog_comment_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
    put:
      operationId: api_v1_blog_comment_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogComment'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
    patch:
      operationId: api_v1_blog_comment_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogComment'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
    delete:
      operationId: api_v1_blog_comment_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/blog/post/:
    get:
      operationId: api_v1_blog_post_list
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
    post:
      operationId: api_v1_blog_post_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
  /api/v1/blog/post{format}:
    get:
      operationId: api_v1_blog_post_formatted_list
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
    post:
      operationId: api_v1_blog_post_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
  /api/v1/blog/post/{id}/:
    get:
      operationId: api_v1_blog_post_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
    put:
      operationId: api_v1_blog_post_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
    patch:
      operationId: api_v1_blog_post_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogPost'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
    delete:
      operationId: api_v1_blog_post_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/blog/post/{id}{format}:
    get:
      operationId: api_v1_blog_post_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
    put:
      operationId: api_v1_blog_post_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
    patch:
      operationId: api_v1_blog_post_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogPost'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
    delete:
      operationId: api_v1_blog_post_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/blog/post/{id}/update_likes/:
    post:
      operationId: api_v1_blog_post_update_likes_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
  /api/v1/blog/post/{id}/update_likes{format}:
    post:
      operationId: api_v1_blog_post_update_likes_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
  /api/v1/blog/post/{id}/update_view_count/:
    post:
      operationId: api_v1_blog_post_update_view_count_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
  /api/v1/blog/post/{id}/update_view_count{format}:
    post:
      operationId: api_v1_blog_post_update_view_count_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
  /api/v1/blog/tag/:
    get:
      operationId: api_v1_blog_tag_list
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogTagList'
          description: ''
    post:
      operationId: api_v1_blog_tag_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogTag'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
  /api/v1/blog/tag{format}:
    get:
      operationId: api_v1_blog_tag_formatted_list
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogTagList'
          description: ''
    post:
      operationId: api_v1_blog_tag_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogTag'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
  /api/v1/blog/tag/{id}/:
    get:
      operationId: api_v1_blog_tag_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
    put:
      operationId: api_v1_blog_tag_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogTag'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
    patch:
      operationId: api_v1_blog_tag_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogTag'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
    delete:
      operationId: api_v1_blog_tag_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/blog/tag/{id}{format}:
    get:
      operationId: api_v1_blog_tag_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
    put:
      operationId: api_v1_blog_tag_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogTag'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
    patch:
      operationId: api_v1_blog_tag_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogTag'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
    delete:
      operationId: api_v1_blog_tag_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/cart/:
    get:
      operationId: api_v1_cart_retrieve
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    put:
      operationId: api_v1_cart_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Cart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Cart'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    patch:
      operationId: api_v1_cart_partial_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCart'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    delete:
      operationId: api_v1_cart_destroy
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/cart{format}:
    get:
      operationId: api_v1_cart_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    put:
      operationId: api_v1_cart_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Cart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Cart'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    patch:
      operationId: api_v1_cart_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCart'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    delete:
      operationId: api_v1_cart_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/cart/item/:
    get:
      operationId: api_v1_cart_item_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartItemList'
          description: ''
    post:
      operationId: api_v1_cart_item_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItem'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
  /api/v1/cart/item{format}:
    get:
      operationId: api_v1_cart_item_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartItemList'
          description: ''
    post:
      operationId: api_v1_cart_item_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItem'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
  /api/v1/cart/item/{id}:
    get:
      operationId: api_v1_cart_item_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
    put:
      operationId: api_v1_cart_item_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItem'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
    patch:
      operationId: api_v1_cart_item_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
    delete:
      operationId: api_v1_cart_item_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/cart/item/{id}{format}:
    get:
      operationId: api_v1_cart_item_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
    put:
      operationId: api_v1_cart_item_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItem'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
    patch:
      operationId: api_v1_cart_item_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
    delete:
      operationId: api_v1_cart_item_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/checkout/:
    post:
      operationId: api_v1_checkout_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/v1/country/:
    get:
      operationId: api_v1_country_list
      parameters:
      - in: query
        name: alpha_2
        schema:
          type: string
      - in: query
        name: alpha_3
        schema:
          type: string
      - in: query
        name: iso_cc
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: phone_code
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCountryList'
          description: ''
    post:
      operationId: api_v1_country_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
  /api/v1/country{format}:
    get:
      operationId: api_v1_country_formatted_list
      parameters:
      - in: query
        name: alpha_2
        schema:
          type: string
      - in: query
        name: alpha_3
        schema:
          type: string
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: iso_cc
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: phone_code
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCountryList'
          description: ''
    post:
      operationId: api_v1_country_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
  /api/v1/country/{alpha_2}/:
    get:
      operationId: api_v1_country_retrieve
      parameters:
      - in: path
        name: alpha_2
        schema:
          type: string
        description: A unique value identifying this country.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
    put:
      operationId: api_v1_country_update
      parameters:
      - in: path
        name: alpha_2
        schema:
          type: string
        description: A unique value identifying this country.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
    patch:
      operationId: api_v1_country_partial_update
      parameters:
      - in: path
        name: alpha_2
        schema:
          type: string
        description: A unique value identifying this country.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
    delete:
      operationId: api_v1_country_destroy
      parameters:
      - in: path
        name: alpha_2
        schema:
          type: string
        description: A unique value identifying this country.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/country/{alpha_2}{format}:
    get:
      operationId: api_v1_country_formatted_retrieve
      parameters:
      - in: path
        name: alpha_2
        schema:
          type: string
        description: A unique value identifying this country.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
    put:
      operationId: api_v1_country_formatted_update
      parameters:
      - in: path
        name: alpha_2
        schema:
          type: string
        description: A unique value identifying this country.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
    patch:
      operationId: api_v1_country_formatted_partial_update
      parameters:
      - in: path
        name: alpha_2
        schema:
          type: string
        description: A unique value identifying this country.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
    delete:
      operationId: api_v1_country_formatted_destroy
      parameters:
      - in: path
        name: alpha_2
        schema:
          type: string
        description: A unique value identifying this country.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/orders/:
    get:
      operationId: api_v1_orders_list
      parameters:
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserOrderList'
          description: ''
  /api/v1/pay_way/:
    get:
      operationId: api_v1_pay_way_list
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: cost
        schema:
          type: number
      - in: query
        name: free_for_order_amount
        schema:
          type: number
      - in: query
        name: name
        schema:
          type: string
          enum:
          - Credit Card
          - Pay On Delivery
          - Pay On Store
          - PayPal
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPayWayList'
          description: ''
    post:
      operationId: api_v1_pay_way_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayWay'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PayWay'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PayWay'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWay'
          description: ''
  /api/v1/pay_way/{name}/:
    get:
      operationId: api_v1_pay_way_retrieve
      parameters:
      - in: path
        name: name
        schema:
          enum:
          - Credit Card
          - Pay On Delivery
          - Pay On Store
          - PayPal
          type: string
        description: A unique value identifying this pay way.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWay'
          description: ''
    put:
      operationId: api_v1_pay_way_update
      parameters:
      - in: path
        name: name
        schema:
          enum:
          - Credit Card
          - Pay On Delivery
          - Pay On Store
          - PayPal
          type: string
        description: A unique value identifying this pay way.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayWay'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PayWay'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PayWay'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWay'
          description: ''
    patch:
      operationId: api_v1_pay_way_partial_update
      parameters:
      - in: path
        name: name
        schema:
          enum:
          - Credit Card
          - Pay On Delivery
          - Pay On Store
          - PayPal
          type: string
        description: A unique value identifying this pay way.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPayWay'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPayWay'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPayWay'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWay'
          description: ''
    delete:
      operationId: api_v1_pay_way_destroy
      parameters:
      - in: path
        name: name
        schema:
          enum:
          - Credit Card
          - Pay On Delivery
          - Pay On Store
          - PayPal
          type: string
        description: A unique value identifying this pay way.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/:
    get:
      operationId: api_v1_product_list
      parameters:
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: id
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: price
        schema:
          type: number
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: api_v1_product_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/product{format}:
    get:
      operationId: api_v1_product_formatted_list
      parameters:
      - in: query
        name: category
        schema:
          type: integer
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: price
        schema:
          type: number
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: api_v1_product_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/product/{id}/:
    get:
      operationId: api_v1_product_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: api_v1_product_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: api_v1_product_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: api_v1_product_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/{id}{format}:
    get:
      operationId: api_v1_product_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: api_v1_product_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: api_v1_product_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: api_v1_product_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/{id}/update_product_hits/:
    post:
      operationId: api_v1_product_update_product_hits_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/product/{id}/update_product_hits{format}:
    post:
      operationId: api_v1_product_update_product_hits_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/product/category/:
    get:
      operationId: api_v1_product_category_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductCategoryList'
          description: ''
    post:
      operationId: api_v1_product_category_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategory'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
  /api/v1/product/category{format}:
    get:
      operationId: api_v1_product_category_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductCategoryList'
          description: ''
    post:
      operationId: api_v1_product_category_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategory'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
  /api/v1/product/category/{id}/:
    get:
      operationId: api_v1_product_category_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
    put:
      operationId: api_v1_product_category_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategory'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
    patch:
      operationId: api_v1_product_category_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
    delete:
      operationId: api_v1_product_category_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/category/{id}{format}:
    get:
      operationId: api_v1_product_category_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
    put:
      operationId: api_v1_product_category_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategory'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
    patch:
      operationId: api_v1_product_category_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
    delete:
      operationId: api_v1_product_category_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/favourite/:
    get:
      operationId: api_v1_product_favourite_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: product_id
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user_id
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductFavouriteList'
          description: ''
    post:
      operationId: api_v1_product_favourite_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
        required: true
      security:
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
  /api/v1/product/favourite{format}:
    get:
      operationId: api_v1_product_favourite_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: product_id
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user_id
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductFavouriteList'
          description: ''
    post:
      operationId: api_v1_product_favourite_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
        required: true
      security:
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
  /api/v1/product/favourite/{id}/:
    get:
      operationId: api_v1_product_favourite_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
    put:
      operationId: api_v1_product_favourite_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
    patch:
      operationId: api_v1_product_favourite_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
    delete:
      operationId: api_v1_product_favourite_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/product/favourite/{id}{format}:
    get:
      operationId: api_v1_product_favourite_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
    put:
      operationId: api_v1_product_favourite_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
    patch:
      operationId: api_v1_product_favourite_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
    delete:
      operationId: api_v1_product_favourite_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/product/review/:
    get:
      operationId: api_v1_product_review_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: product_id
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user_id
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
    post:
      operationId: api_v1_product_review_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
  /api/v1/product/review{format}:
    get:
      operationId: api_v1_product_review_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: product_id
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user_id
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
    post:
      operationId: api_v1_product_review_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
  /api/v1/product/review/{id}/:
    get:
      operationId: api_v1_product_review_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    put:
      operationId: api_v1_product_review_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    patch:
      operationId: api_v1_product_review_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    delete:
      operationId: api_v1_product_review_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/product/review/{id}{format}:
    get:
      operationId: api_v1_product_review_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    put:
      operationId: api_v1_product_review_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    patch:
      operationId: api_v1_product_review_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    delete:
      operationId: api_v1_product_review_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/region/:
    get:
      operationId: api_v1_region_list
      parameters:
      - in: query
        name: alpha
        schema:
          type: string
      - in: query
        name: alpha_2
        schema:
          type: string
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegionList'
          description: ''
    post:
      operationId: api_v1_region_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Region'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
  /api/v1/region{format}:
    get:
      operationId: api_v1_region_formatted_list
      parameters:
      - in: query
        name: alpha
        schema:
          type: string
      - in: query
        name: alpha_2
        schema:
          type: string
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegionList'
          description: ''
    post:
      operationId: api_v1_region_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Region'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
  /api/v1/region/{alpha}/:
    get:
      operationId: api_v1_region_retrieve
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
        description: A unique value identifying this region.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
    put:
      operationId: api_v1_region_update
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
        description: A unique value identifying this region.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Region'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
    patch:
      operationId: api_v1_region_partial_update
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
        description: A unique value identifying this region.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
    delete:
      operationId: api_v1_region_destroy
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
        description: A unique value identifying this region.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/region/{alpha}{format}:
    get:
      operationId: api_v1_region_formatted_retrieve
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
        description: A unique value identifying this region.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
    put:
      operationId: api_v1_region_formatted_update
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
        description: A unique value identifying this region.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Region'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
    patch:
      operationId: api_v1_region_formatted_partial_update
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
        description: A unique value identifying this region.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
    delete:
      operationId: api_v1_region_formatted_destroy
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
        description: A unique value identifying this region.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/region/{alpha}/get_regions_by_country_alpha_2/:
    get:
      operationId: api_v1_region_get_regions_by_country_alpha_2_retrieve
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
        description: A unique value identifying this region.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
  /api/v1/region/{alpha}/get_regions_by_country_alpha_2{format}:
    get:
      operationId: api_v1_region_get_regions_by_country_alpha_2_formatted_retrieve
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
        description: A unique value identifying this region.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
  /api/v1/search-product:
    get:
      operationId: api_v1_search_product_list
      parameters:
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
  /api/v1/search-product{format}:
    get:
      operationId: api_v1_search_product_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
  /api/v1/session/clear_all/:
    post:
      operationId: api_v1_session_clear_all_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAccount'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: ''
  /api/v1/session/clear_all{format}:
    post:
      operationId: api_v1_session_clear_all_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAccount'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: ''
  /api/v1/slide/:
    get:
      operationId: api_v1_slide_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slider
        schema:
          type: integer
      - in: query
        name: title
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSlideList'
          description: ''
    post:
      operationId: api_v1_slide_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Slide'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slide'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
  /api/v1/slide{format}:
    get:
      operationId: api_v1_slide_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slider
        schema:
          type: integer
      - in: query
        name: title
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSlideList'
          description: ''
    post:
      operationId: api_v1_slide_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Slide'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slide'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
  /api/v1/slide/{id}/:
    get:
      operationId: api_v1_slide_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
    put:
      operationId: api_v1_slide_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Slide'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slide'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
    patch:
      operationId: api_v1_slide_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
    delete:
      operationId: api_v1_slide_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/slide/{id}{format}:
    get:
      operationId: api_v1_slide_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
    put:
      operationId: api_v1_slide_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Slide'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slide'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
    patch:
      operationId: api_v1_slide_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
    delete:
      operationId: api_v1_slide_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/slider/:
    get:
      operationId: api_v1_slider_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSliderList'
          description: ''
    post:
      operationId: api_v1_slider_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Slider'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slider'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
  /api/v1/slider{format}:
    get:
      operationId: api_v1_slider_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSliderList'
          description: ''
    post:
      operationId: api_v1_slider_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Slider'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slider'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
  /api/v1/slider/{id}/:
    get:
      operationId: api_v1_slider_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
    put:
      operationId: api_v1_slider_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Slider'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slider'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
    patch:
      operationId: api_v1_slider_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
    delete:
      operationId: api_v1_slider_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/slider/{id}{format}:
    get:
      operationId: api_v1_slider_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
    put:
      operationId: api_v1_slider_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Slider'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slider'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
    patch:
      operationId: api_v1_slider_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
    delete:
      operationId: api_v1_slider_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/tip/:
    get:
      operationId: api_v1_tip_list
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: kind
        schema:
          type: string
          enum:
          - error
          - info
          - success
          - warning
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: title
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTipList'
          description: ''
    post:
      operationId: api_v1_tip_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tip'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tip'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
  /api/v1/tip{format}:
    get:
      operationId: api_v1_tip_formatted_list
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: kind
        schema:
          type: string
          enum:
          - error
          - info
          - success
          - warning
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: title
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTipList'
          description: ''
    post:
      operationId: api_v1_tip_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tip'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tip'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
  /api/v1/tip/{id}/:
    get:
      operationId: api_v1_tip_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
    put:
      operationId: api_v1_tip_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tip'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tip'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
    patch:
      operationId: api_v1_tip_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTip'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTip'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
    delete:
      operationId: api_v1_tip_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/tip/{id}{format}:
    get:
      operationId: api_v1_tip_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
    put:
      operationId: api_v1_tip_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tip'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tip'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
    patch:
      operationId: api_v1_tip_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTip'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTip'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
    delete:
      operationId: api_v1_tip_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/user/account/:
    get:
      operationId: api_v1_user_account_list
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserAccountList'
          description: ''
    post:
      operationId: api_v1_user_account_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAccount'
        required: true
      security:
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: ''
  /api/v1/user/account{format}:
    get:
      operationId: api_v1_user_account_formatted_list
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserAccountList'
          description: ''
    post:
      operationId: api_v1_user_account_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAccount'
        required: true
      security:
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: ''
  /api/v1/user/account/{id}/:
    get:
      operationId: api_v1_user_account_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: ''
    put:
      operationId: api_v1_user_account_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAccount'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: ''
    patch:
      operationId: api_v1_user_account_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserAccount'
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: ''
    delete:
      operationId: api_v1_user_account_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/user/account/{id}{format}:
    get:
      operationId: api_v1_user_account_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: ''
    put:
      operationId: api_v1_user_account_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAccount'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: ''
    patch:
      operationId: api_v1_user_account_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserAccount'
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: ''
    delete:
      operationId: api_v1_user_account_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/user/account/session/:
    get:
      operationId: api_v1_user_account_session_retrieve
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: ''
  /api/v1/user/account/session{format}:
    get:
      operationId: api_v1_user_account_session_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: ''
  /api/v1/user/address/:
    get:
      operationId: api_v1_user_address_list
      parameters:
      - in: query
        name: city
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
      - in: query
        name: floor
        schema:
          type: integer
          nullable: true
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: is_main
        schema:
          type: boolean
      - in: query
        name: location_type
        schema:
          type: integer
          nullable: true
          enum:
          - 0
          - 1
          - 2
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: street
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
      - in: query
        name: zipcode
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserAddressList'
          description: ''
    post:
      operationId: api_v1_user_address_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddress'
        required: true
      security:
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
  /api/v1/user/address{format}:
    get:
      operationId: api_v1_user_address_formatted_list
      parameters:
      - in: query
        name: city
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
      - in: query
        name: floor
        schema:
          type: integer
          nullable: true
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: is_main
        schema:
          type: boolean
      - in: query
        name: location_type
        schema:
          type: integer
          nullable: true
          enum:
          - 0
          - 1
          - 2
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: street
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
      - in: query
        name: zipcode
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserAddressList'
          description: ''
    post:
      operationId: api_v1_user_address_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddress'
        required: true
      security:
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
  /api/v1/user/address/{id}/:
    get:
      operationId: api_v1_user_address_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
    put:
      operationId: api_v1_user_address_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddress'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
    patch:
      operationId: api_v1_user_address_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserAddress'
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
    delete:
      operationId: api_v1_user_address_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/user/address/{id}{format}:
    get:
      operationId: api_v1_user_address_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
    put:
      operationId: api_v1_user_address_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddress'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
    patch:
      operationId: api_v1_user_address_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserAddress'
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
    delete:
      operationId: api_v1_user_address_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/vat/:
    get:
      operationId: api_v1_vat_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: value
        schema:
          type: number
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVatList'
          description: ''
    post:
      operationId: api_v1_vat_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vat'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vat'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
  /api/v1/vat{format}:
    get:
      operationId: api_v1_vat_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: value
        schema:
          type: number
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVatList'
          description: ''
    post:
      operationId: api_v1_vat_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vat'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vat'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
  /api/v1/vat/{id}/:
    get:
      operationId: api_v1_vat_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
    put:
      operationId: api_v1_vat_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vat'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vat'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
    patch:
      operationId: api_v1_vat_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVat'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVat'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
    delete:
      operationId: api_v1_vat_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/vat/{id}{format}:
    get:
      operationId: api_v1_vat_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
    put:
      operationId: api_v1_vat_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vat'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vat'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
    patch:
      operationId: api_v1_vat_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVat'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVat'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
    delete:
      operationId: api_v1_vat_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
components:
  schemas:
    BlankEnum:
      enum:
      - ''
    BlogAuthor:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        bio:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - id
      - updated_at
      - user
      - uuid
    BlogCategory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        image:
          type: string
          format: uri
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        sort_order:
          type: integer
          readOnly: true
          nullable: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        main_image_absolute_url:
          type: string
          readOnly: true
        main_image_filename:
          type: string
          readOnly: true
      required:
      - id
      - main_image_absolute_url
      - main_image_filename
      - name
      - slug
      - sort_order
      - updated_at
      - uuid
    BlogComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        content:
          type: string
          maxLength: 1000
        is_approved:
          type: boolean
        likes:
          type: array
          items:
            type: integer
        user:
          type: integer
          nullable: true
        post:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        number_of_likes:
          type: integer
          readOnly: true
      required:
      - content
      - id
      - number_of_likes
      - post
      - updated_at
      - user
      - uuid
    BlogPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        subtitle:
          type: string
          nullable: true
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        body:
          type: string
        meta_description:
          type: string
          nullable: true
          maxLength: 150
        image:
          type: string
          format: uri
          nullable: true
        likes:
          type: array
          items:
            type: integer
        category:
          type: integer
          nullable: true
        tags:
          type: array
          items:
            type: integer
        author:
          type: integer
          nullable: true
        status:
          $ref: '#/components/schemas/BlogPostStatusEnum'
        featured:
          type: boolean
        view_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        published_at:
          type: string
          format: date-time
          nullable: true
        is_published:
          type: boolean
        uuid:
          type: string
          format: uuid
          readOnly: true
        main_image_absolute_url:
          type: string
          readOnly: true
        main_image_filename:
          type: string
          readOnly: true
        number_of_likes:
          type: integer
          readOnly: true
        number_of_comments:
          type: integer
          readOnly: true
        get_post_tags_count:
          type: integer
          readOnly: true
      required:
      - body
      - get_post_tags_count
      - id
      - likes
      - main_image_absolute_url
      - main_image_filename
      - number_of_comments
      - number_of_likes
      - slug
      - title
      - updated_at
      - uuid
    BlogPostStatusEnum:
      enum:
      - draft
      - published
      - archived
      type: string
    BlogTag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        sort_order:
          type: integer
          readOnly: true
          nullable: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        get_tag_posts_count:
          type: integer
          readOnly: true
      required:
      - get_tag_posts_count
      - id
      - name
      - sort_order
      - updated_at
      - uuid
    Cart:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          nullable: true
        total_price:
          type: number
          format: double
          readOnly: true
        total_discount_value:
          type: number
          format: double
          readOnly: true
        total_vat_value:
          type: number
          format: double
          readOnly: true
        total_items:
          type: integer
          readOnly: true
        total_items_unique:
          type: integer
          readOnly: true
        cart_items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          readOnly: true
      required:
      - cart_items
      - id
      - total_discount_value
      - total_items
      - total_items_unique
      - total_price
      - total_vat_value
    CartItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        cart:
          type: integer
          readOnly: true
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        total_price:
          type: number
          format: double
          readOnly: true
        total_discount_value:
          type: number
          format: double
          readOnly: true
        product_discount_percent:
          type: number
          format: double
          readOnly: true
      required:
      - cart
      - id
      - product
      - product_discount_percent
      - total_discount_value
      - total_price
    Country:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
        alpha_2:
          type: string
          maxLength: 2
        alpha_3:
          type: string
          maxLength: 3
        iso_cc:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
        phone_code:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
        regions:
          type: array
          items:
            $ref: '#/components/schemas/Region'
      required:
      - alpha_2
      - alpha_3
      - name
    FloorEnum:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      type: integer
    KindEnum:
      enum:
      - success
      - info
      - error
      - warning
      type: string
    LocationTypeEnum:
      enum:
      - 0
      - 1
      - 2
      type: integer
    NameEnum:
      enum:
      - Credit Card
      - Pay On Delivery
      - Pay On Store
      - PayPal
      type: string
    NullEnum:
      enum:
      - null
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          nullable: true
        pay_way:
          allOf:
          - $ref: '#/components/schemas/PayWayEnum'
          nullable: true
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        email:
          type: string
          maxLength: 100
        address:
          type: string
          maxLength: 100
        zipcode:
          type: string
          maxLength: 100
        place:
          type: string
          maxLength: 100
        city:
          type: string
          maxLength: 100
        phone:
          type: string
          maxLength: 100
        customer_notes:
          type: string
          nullable: true
        stripe_token:
          type: string
          nullable: true
          maxLength: 100
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        get_total_price:
          type: number
          format: double
          readOnly: true
      required:
      - address
      - city
      - email
      - first_name
      - get_total_price
      - id
      - items
      - last_name
      - phone
      - place
      - updated_at
      - uuid
      - zipcode
    OrderItem:
      type: object
      properties:
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        sort_order:
          type: integer
          readOnly: true
          nullable: true
        get_total_price:
          type: number
          format: double
          readOnly: true
      required:
      - get_total_price
      - price
      - product
      - sort_order
      - updated_at
      - uuid
    PaginatedBlogAuthorList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogAuthor'
    PaginatedBlogCategoryList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogCategory'
    PaginatedBlogCommentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogComment'
    PaginatedBlogPostList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogPost'
    PaginatedBlogTagList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogTag'
    PaginatedCartItemList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    PaginatedCountryList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Country'
    PaginatedPayWayList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PayWay'
    PaginatedProductCategoryList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategory'
    PaginatedProductFavouriteList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductFavourite'
    PaginatedProductList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PaginatedProductReviewList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductReview'
    PaginatedRegionList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Region'
    PaginatedSlideList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Slide'
    PaginatedSliderList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Slider'
    PaginatedTipList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tip'
    PaginatedUserAccountList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserAccount'
    PaginatedUserAddressList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserAddress'
    PaginatedUserOrderList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserOrder'
    PaginatedVatList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Vat'
    PatchedBlogAuthor:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        bio:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
    PatchedBlogCategory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        image:
          type: string
          format: uri
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        sort_order:
          type: integer
          readOnly: true
          nullable: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        main_image_absolute_url:
          type: string
          readOnly: true
        main_image_filename:
          type: string
          readOnly: true
    PatchedBlogComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        content:
          type: string
          maxLength: 1000
        is_approved:
          type: boolean
        likes:
          type: array
          items:
            type: integer
        user:
          type: integer
          nullable: true
        post:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        number_of_likes:
          type: integer
          readOnly: true
    PatchedBlogPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        subtitle:
          type: string
          nullable: true
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        body:
          type: string
        meta_description:
          type: string
          nullable: true
          maxLength: 150
        image:
          type: string
          format: uri
          nullable: true
        likes:
          type: array
          items:
            type: integer
        category:
          type: integer
          nullable: true
        tags:
          type: array
          items:
            type: integer
        author:
          type: integer
          nullable: true
        status:
          $ref: '#/components/schemas/BlogPostStatusEnum'
        featured:
          type: boolean
        view_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        published_at:
          type: string
          format: date-time
          nullable: true
        is_published:
          type: boolean
        uuid:
          type: string
          format: uuid
          readOnly: true
        main_image_absolute_url:
          type: string
          readOnly: true
        main_image_filename:
          type: string
          readOnly: true
        number_of_likes:
          type: integer
          readOnly: true
        number_of_comments:
          type: integer
          readOnly: true
        get_post_tags_count:
          type: integer
          readOnly: true
    PatchedBlogTag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        sort_order:
          type: integer
          readOnly: true
          nullable: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        get_tag_posts_count:
          type: integer
          readOnly: true
    PatchedCart:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          nullable: true
        total_price:
          type: number
          format: double
          readOnly: true
        total_discount_value:
          type: number
          format: double
          readOnly: true
        total_vat_value:
          type: number
          format: double
          readOnly: true
        total_items:
          type: integer
          readOnly: true
        total_items_unique:
          type: integer
          readOnly: true
        cart_items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          readOnly: true
    PatchedCartItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        cart:
          type: integer
          readOnly: true
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        total_price:
          type: number
          format: double
          readOnly: true
        total_discount_value:
          type: number
          format: double
          readOnly: true
        product_discount_percent:
          type: number
          format: double
          readOnly: true
    PatchedCountry:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
        alpha_2:
          type: string
          maxLength: 2
        alpha_3:
          type: string
          maxLength: 3
        iso_cc:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
        phone_code:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
        regions:
          type: array
          items:
            $ref: '#/components/schemas/Region'
    PatchedPayWay:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/NameEnum'
        active:
          type: boolean
        cost:
          type: string
          format: decimal
          pattern: ^-?\d{0,9}(?:\.\d{0,2})?$
        free_for_order_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,9}(?:\.\d{0,2})?$
    PatchedProduct:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
          nullable: true
        absolute_url:
          type: string
          readOnly: true
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,9}(?:\.\d{0,2})?$
          nullable: true
        vat:
          type: integer
          nullable: true
        vat_percent:
          oneOf:
          - type: number
            format: double
          - type: integer
          readOnly: true
        vat_value:
          oneOf:
          - type: number
            format: double
          - type: integer
          readOnly: true
        final_price:
          type: number
          format: double
          readOnly: true
        hits:
          type: integer
          maximum: 2147483647
          minimum: 0
        likes_counter:
          type: integer
          readOnly: true
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        active:
          type: boolean
        weight:
          type: string
          format: decimal
          pattern: ^-?\d{0,9}(?:\.\d{0,2})?$
          title: Weight (kg)
        seo_title:
          type: string
          nullable: true
          maxLength: 70
        seo_description:
          type: string
          nullable: true
          maxLength: 300
        uuid:
          type: string
          format: uuid
          readOnly: true
        discount_percent:
          type: string
          format: decimal
          pattern: ^-?\d{0,9}(?:\.\d{0,2})?$
        discount_value:
          type: number
          format: double
          readOnly: true
        price_save_percent:
          type: number
          format: double
          readOnly: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        main_image_absolute_url:
          type: string
          readOnly: true
        main_image_filename:
          type: string
          readOnly: true
        review_average:
          type: number
          format: double
          readOnly: true
        review_counter:
          type: integer
          readOnly: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImages'
          readOnly: true
    PatchedProductCategory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
          nullable: true
        category_menu_image_one_absolute_url:
          type: string
          readOnly: true
        category_menu_image_one_filename:
          type: string
          readOnly: true
        category_menu_image_two_absolute_url:
          type: string
          readOnly: true
        category_menu_image_two_filename:
          type: string
          readOnly: true
        category_menu_main_banner_absolute_url:
          type: string
          readOnly: true
        category_menu_main_banner_filename:
          type: string
          readOnly: true
        parent:
          type: integer
          nullable: true
        tags:
          type: string
          nullable: true
          description: SEO keywords
          maxLength: 100
        level:
          type: integer
          readOnly: true
        tree_id:
          type: integer
          readOnly: true
        absolute_url:
          type: string
          readOnly: true
        recursive_product_count:
          type: integer
          readOnly: true
    PatchedProductFavourite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        product:
          type: integer
    PatchedProductReview:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product:
          type: integer
        user:
          type: integer
        comment:
          type: string
          maxLength: 250
        rate:
          allOf:
          - $ref: '#/components/schemas/RateEnum'
          minimum: 0
          maximum: 32767
        status:
          $ref: '#/components/schemas/ProductReviewStatusEnum'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedRegion:
      type: object
      properties:
        alpha:
          type: string
          maxLength: 10
        sort_order:
          type: integer
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        alpha_2:
          type: string
    PatchedSlide:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        slider:
          type: integer
        url:
          type: string
          nullable: true
          maxLength: 255
        title:
          type: string
          nullable: true
          maxLength: 40
        subtitle:
          type: string
          nullable: true
          maxLength: 40
        description:
          type: string
          nullable: true
          maxLength: 255
        discount:
          type: string
          format: decimal
          pattern: ^-?\d{0,9}(?:\.\d{0,2})?$
        button_label:
          type: string
          nullable: true
          maxLength: 10
        show_button:
          type: boolean
        date_start:
          type: string
          format: date-time
        date_end:
          type: string
          format: date-time
        order_position:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        main_image_absolute_url:
          type: string
          readOnly: true
        main_image_filename:
          type: string
          readOnly: true
        thumbnail:
          type: string
          format: uri
          nullable: true
    PatchedSlider:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 40
        url:
          type: string
          nullable: true
          maxLength: 255
        title:
          type: string
          nullable: true
          maxLength: 40
        description:
          type: string
          nullable: true
          maxLength: 255
        main_image_absolute_url:
          type: string
          readOnly: true
        main_image_filename:
          type: string
          readOnly: true
        thumbnail:
          type: string
          format: uri
          nullable: true
        video:
          type: string
          format: uri
          nullable: true
        slides:
          type: array
          items:
            $ref: '#/components/schemas/Slide'
          readOnly: true
    PatchedTip:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 200
        content:
          type: string
          maxLength: 1000
        kind:
          $ref: '#/components/schemas/KindEnum'
        icon:
          type: string
          format: uri
          nullable: true
        url:
          type: string
          maxLength: 200
        active:
          type: boolean
    PatchedUserAccount:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 255
        first_name:
          type: string
          maxLength: 255
        last_name:
          type: string
          maxLength: 255
        phone:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        city:
          type: string
          nullable: true
          maxLength: 100
        zipcode:
          type: string
          nullable: true
          maxLength: 100
        address:
          type: string
          nullable: true
          maxLength: 100
        place:
          type: string
          nullable: true
          maxLength: 100
        country:
          type: string
          nullable: true
        region:
          type: string
          nullable: true
        is_active:
          type: boolean
        is_staff:
          type: boolean
        main_image_absolute_url:
          type: string
          readOnly: true
        main_image_filename:
          type: string
          readOnly: true
    PatchedUserAddress:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        street:
          type: string
          maxLength: 100
        street_number:
          type: string
          maxLength: 100
        city:
          type: string
          maxLength: 100
        zipcode:
          type: string
          maxLength: 100
        floor:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        location_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        phone:
          type: string
          nullable: true
          maxLength: 100
        mobile_phone:
          type: string
          nullable: true
          maxLength: 100
        notes:
          type: string
          nullable: true
          maxLength: 100
        is_main:
          type: boolean
        user:
          type: integer
        country:
          type: string
          nullable: true
        region:
          type: string
          nullable: true
    PatchedVat:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        value:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,1})?$
    PayWay:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/NameEnum'
        active:
          type: boolean
        cost:
          type: string
          format: decimal
          pattern: ^-?\d{0,9}(?:\.\d{0,2})?$
        free_for_order_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,9}(?:\.\d{0,2})?$
      required:
      - name
    PayWayEnum:
      enum:
      - Credit Card
      - Pay On Delivery
      - Pay On Store
      - PayPal
      type: string
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
          nullable: true
        absolute_url:
          type: string
          readOnly: true
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,9}(?:\.\d{0,2})?$
          nullable: true
        vat:
          type: integer
          nullable: true
        vat_percent:
          oneOf:
          - type: number
            format: double
          - type: integer
          readOnly: true
        vat_value:
          oneOf:
          - type: number
            format: double
          - type: integer
          readOnly: true
        final_price:
          type: number
          format: double
          readOnly: true
        hits:
          type: integer
          maximum: 2147483647
          minimum: 0
        likes_counter:
          type: integer
          readOnly: true
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        active:
          type: boolean
        weight:
          type: string
          format: decimal
          pattern: ^-?\d{0,9}(?:\.\d{0,2})?$
          title: Weight (kg)
        seo_title:
          type: string
          nullable: true
          maxLength: 70
        seo_description:
          type: string
          nullable: true
          maxLength: 300
        uuid:
          type: string
          format: uuid
          readOnly: true
        discount_percent:
          type: string
          format: decimal
          pattern: ^-?\d{0,9}(?:\.\d{0,2})?$
        discount_value:
          type: number
          format: double
          readOnly: true
        price_save_percent:
          type: number
          format: double
          readOnly: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        main_image_absolute_url:
          type: string
          readOnly: true
        main_image_filename:
          type: string
          readOnly: true
        review_average:
          type: number
          format: double
          readOnly: true
        review_counter:
          type: integer
          readOnly: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImages'
          readOnly: true
      required:
      - absolute_url
      - discount_value
      - final_price
      - id
      - images
      - likes_counter
      - main_image_absolute_url
      - main_image_filename
      - name
      - price_save_percent
      - review_average
      - review_counter
      - slug
      - updated_at
      - uuid
      - vat_percent
      - vat_value
    ProductCategory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
          nullable: true
        category_menu_image_one_absolute_url:
          type: string
          readOnly: true
        category_menu_image_one_filename:
          type: string
          readOnly: true
        category_menu_image_two_absolute_url:
          type: string
          readOnly: true
        category_menu_image_two_filename:
          type: string
          readOnly: true
        category_menu_main_banner_absolute_url:
          type: string
          readOnly: true
        category_menu_main_banner_filename:
          type: string
          readOnly: true
        parent:
          type: integer
          nullable: true
        tags:
          type: string
          nullable: true
          description: SEO keywords
          maxLength: 100
        level:
          type: integer
          readOnly: true
        tree_id:
          type: integer
          readOnly: true
        absolute_url:
          type: string
          readOnly: true
        recursive_product_count:
          type: integer
          readOnly: true
      required:
      - absolute_url
      - category_menu_image_one_absolute_url
      - category_menu_image_one_filename
      - category_menu_image_two_absolute_url
      - category_menu_image_two_filename
      - category_menu_main_banner_absolute_url
      - category_menu_main_banner_filename
      - id
      - level
      - name
      - recursive_product_count
      - slug
      - tree_id
    ProductFavourite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        product:
          type: integer
      required:
      - id
      - product
      - user
    ProductImages:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        is_main:
          type: boolean
        product_image_absolute_url:
          type: string
          readOnly: true
        product_image_filename:
          type: string
          readOnly: true
      required:
      - id
      - product_image_absolute_url
      - product_image_filename
    ProductReview:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product:
          type: integer
        user:
          type: integer
        comment:
          type: string
          maxLength: 250
        rate:
          allOf:
          - $ref: '#/components/schemas/RateEnum'
          minimum: 0
          maximum: 32767
        status:
          $ref: '#/components/schemas/ProductReviewStatusEnum'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - id
      - product
      - rate
      - updated_at
      - user
    ProductReviewStatusEnum:
      enum:
      - New
      - 'True'
      - 'False'
      type: string
    RateEnum:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      type: integer
    Region:
      type: object
      properties:
        alpha:
          type: string
          maxLength: 10
        sort_order:
          type: integer
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        alpha_2:
          type: string
      required:
      - alpha
      - alpha_2
      - name
      - sort_order
      - updated_at
      - uuid
    Slide:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        slider:
          type: integer
        url:
          type: string
          nullable: true
          maxLength: 255
        title:
          type: string
          nullable: true
          maxLength: 40
        subtitle:
          type: string
          nullable: true
          maxLength: 40
        description:
          type: string
          nullable: true
          maxLength: 255
        discount:
          type: string
          format: decimal
          pattern: ^-?\d{0,9}(?:\.\d{0,2})?$
        button_label:
          type: string
          nullable: true
          maxLength: 10
        show_button:
          type: boolean
        date_start:
          type: string
          format: date-time
        date_end:
          type: string
          format: date-time
        order_position:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        main_image_absolute_url:
          type: string
          readOnly: true
        main_image_filename:
          type: string
          readOnly: true
        thumbnail:
          type: string
          format: uri
          nullable: true
      required:
      - date_end
      - date_start
      - id
      - main_image_absolute_url
      - main_image_filename
      - order_position
      - slider
    Slider:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 40
        url:
          type: string
          nullable: true
          maxLength: 255
        title:
          type: string
          nullable: true
          maxLength: 40
        description:
          type: string
          nullable: true
          maxLength: 255
        main_image_absolute_url:
          type: string
          readOnly: true
        main_image_filename:
          type: string
          readOnly: true
        thumbnail:
          type: string
          format: uri
          nullable: true
        video:
          type: string
          format: uri
          nullable: true
        slides:
          type: array
          items:
            $ref: '#/components/schemas/Slide'
          readOnly: true
      required:
      - id
      - main_image_absolute_url
      - main_image_filename
      - name
      - slides
    Tip:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 200
        content:
          type: string
          maxLength: 1000
        kind:
          $ref: '#/components/schemas/KindEnum'
        icon:
          type: string
          format: uri
          nullable: true
        url:
          type: string
          maxLength: 200
        active:
          type: boolean
      required:
      - content
      - id
      - kind
      - title
      - updated_at
      - url
    UserAccount:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 255
        first_name:
          type: string
          maxLength: 255
        last_name:
          type: string
          maxLength: 255
        phone:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        city:
          type: string
          nullable: true
          maxLength: 100
        zipcode:
          type: string
          nullable: true
          maxLength: 100
        address:
          type: string
          nullable: true
          maxLength: 100
        place:
          type: string
          nullable: true
          maxLength: 100
        country:
          type: string
          nullable: true
        region:
          type: string
          nullable: true
        is_active:
          type: boolean
        is_staff:
          type: boolean
        main_image_absolute_url:
          type: string
          readOnly: true
        main_image_filename:
          type: string
          readOnly: true
      required:
      - email
      - first_name
      - id
      - last_name
      - main_image_absolute_url
      - main_image_filename
    UserAddress:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        street:
          type: string
          maxLength: 100
        street_number:
          type: string
          maxLength: 100
        city:
          type: string
          maxLength: 100
        zipcode:
          type: string
          maxLength: 100
        floor:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        location_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        phone:
          type: string
          nullable: true
          maxLength: 100
        mobile_phone:
          type: string
          nullable: true
          maxLength: 100
        notes:
          type: string
          nullable: true
          maxLength: 100
        is_main:
          type: boolean
        user:
          type: integer
        country:
          type: string
          nullable: true
        region:
          type: string
          nullable: true
      required:
      - city
      - first_name
      - id
      - last_name
      - street
      - street_number
      - title
      - updated_at
      - user
      - uuid
      - zipcode
    UserOrder:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        email:
          type: string
          maxLength: 100
        address:
          type: string
          maxLength: 100
        zipcode:
          type: string
          maxLength: 100
        place:
          type: string
          maxLength: 100
        city:
          type: string
          maxLength: 100
        phone:
          type: string
          maxLength: 100
        stripe_token:
          type: string
          nullable: true
          maxLength: 100
        customer_notes:
          type: string
          nullable: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserOrderItem'
        paid_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        get_total_price:
          type: number
          format: double
          readOnly: true
      required:
      - address
      - city
      - email
      - first_name
      - get_total_price
      - id
      - items
      - last_name
      - phone
      - place
      - updated_at
      - uuid
      - zipcode
    UserOrderItem:
      type: object
      properties:
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        sort_order:
          type: integer
          readOnly: true
          nullable: true
        get_total_price:
          type: number
          format: double
          readOnly: true
      required:
      - get_total_price
      - price
      - product
      - sort_order
      - updated_at
      - uuid
    Vat:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        value:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,1})?$
      required:
      - id
      - updated_at
      - uuid
      - value
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
