# This workflow will install Python dependencies, run tests and lint with a single version of Python

name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  Quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.10.7
    - name: Install Python Poetry
      uses: abatilo/actions-poetry@v2.1.0
      with:
        poetry-version: 1.1.15
    - name: Configure poetry
      shell: bash
      run: python -m poetry config virtualenvs.in-project true
    - name: View poetry version
      run: poetry --version
    - name: Install dependencies
      run: |
        python -m poetry install
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        python -m poetry run flake8 . --exclude .venv --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        python -m poetry run flake8 . --exclude .venv --count --exit-zero --max-complexity=31 --max-line-length=92 --statistics
    - name: Testing
      run: |
        python -m poetry run coverage run src/manage.py test && coverage report


  Testing:
    needs: Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        db: [ sqlite, postgres, mysql ]
        python-version: [ 3.9, 3.10 ]
        include:
          - db: postgres
            db_host: db
            db_port: 5432
            db_user: devuser
            db_password: changeme
          - db: mysql
            db_host: db
            db_port: 3306
            db_user: root
            db_password: root
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Start MySQL
        if: matrix.db == 'mysql'
        run: sudo systemctl start mysql.service
      - name: Start PostgreSQL
        if: matrix.db == 'postgres'
        run: |
          sudo systemctl start postgresql.service
          sudo -u postgres createuser -s runner
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install apprise braintree coverage coveralls mysqlclient
      - name: Run Tests
        env:
          DB: ${{ matrix.db }}
          DB_HOST: ${{ matrix.db_host }}
          DB_PORT: ${{ matrix.db_port }}
          DB_USER: ${{ matrix.db_user }}
          DB_PASSWORD: ${{ matrix.db_password }}
        run: |
          coverage run --omit=*/tests/*  src/manage.py test && coverage report
      - name: Coveralls
        if: matrix.db == 'postgres'
        run: coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Coverage comment
        id: coverage_comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Store Pull Request comment to be posted
        uses: actions/upload-artifact@v3
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          # If you use a different name, update COMMENT_ARTIFACT_NAME accordingly
          name: python-coverage-comment-action
          # If you use a different name, update COMMENT_FILENAME accordingly
          path: python-coverage-comment-action.txt

  Release:
    needs: Testing
    runs-on: ubuntu-latest
    concurrency: release

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Python Semantic Release
      uses: relekang/python-semantic-release@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        repository_username: __token__
        repository_password: ${{ secrets.PYPI_TOKEN }}
